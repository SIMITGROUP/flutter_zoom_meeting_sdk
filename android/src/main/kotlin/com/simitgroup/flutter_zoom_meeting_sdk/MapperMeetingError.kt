package com.simitgroup.flutter_zoom_meeting_sdk

import us.zoom.sdk.MeetingError

object MapperMeetingError {
    private val errorNames = mapOf(
        MeetingError.MEETING_ERROR_SUCCESS to "SUCCESS",
        MeetingError.MEETING_ERROR_INCORRECT_MEETING_NUMBER to "INCORRECT_MEETING_NUMBER",
        MeetingError.MEETING_ERROR_TIMEOUT to "TIMEOUT",
        MeetingError.MEETING_ERROR_NETWORK_UNAVAILABLE to "NETWORK_UNAVAILABLE",
        MeetingError.MEETING_ERROR_CLIENT_INCOMPATIBLE to "CLIENT_INCOMPATIBLE",
        MeetingError.MEETING_ERROR_NETWORK_ERROR to "NETWORK_ERROR",
        MeetingError.MEETING_ERROR_MMR_ERROR to "MMR_ERROR",
        MeetingError.MEETING_ERROR_SESSION_ERROR to "SESSION_ERROR",
        MeetingError.MEETING_ERROR_MEETING_OVER to "MEETING_OVER",
        MeetingError.MEETING_ERROR_MEETING_NOT_EXIST to "MEETING_NOT_EXIST",
        MeetingError.MEETING_ERROR_USER_FULL to "USER_FULL",
        MeetingError.MEETING_ERROR_NO_MMR to "NO_MMR",
        MeetingError.MEETING_ERROR_LOCKED to "MEETING_LOCKED",
        MeetingError.MEETING_ERROR_RESTRICTED to "MEETING_RESTRICTED",
        MeetingError.MEETING_ERROR_RESTRICTED_JBH to "MEETING_JBH_RESTRICTED",
        MeetingError.MEETING_ERROR_WEB_SERVICE_FAILED to "WEB_SERVICE_FAILED",
        MeetingError.MEETING_ERROR_REGISTER_WEBINAR_FULL to "REGISTER_WEBINAR_FULL",
        MeetingError.MEETING_ERROR_DISALLOW_HOST_REGISTER_WEBINAR to "REGISTER_WEBINAR_HOST_REGISTER",
        MeetingError.MEETING_ERROR_DISALLOW_PANELIST_REGISTER_WEBINAR to "REGISTER_WEBINAR_PANELIST_REGISTER",
        MeetingError.MEETING_ERROR_HOST_DENY_EMAIL_REGISTER_WEBINAR to "REGISTER_WEBINAR_DENIED_EMAIL",
        MeetingError.MEETING_ERROR_WEBINAR_ENFORCE_LOGIN to "REGISTER_WEBINAR_ENFORCE_LOGIN",
        MeetingError.MEETING_ERROR_EXIT_WHEN_WAITING_HOST_START to "EXIT_WHEN_WAITING_HOST_START",
        MeetingError.MEETING_ERROR_REMOVED_BY_HOST to "REMOVED_BY_HOST",
        MeetingError.MEETING_ERROR_HOST_DISALLOW_OUTSIDE_USER_JOIN to "HOST_DISALLOW_OUTSIDE_USER_JOIN",
        MeetingError.MEETING_ERROR_UNABLE_TO_JOIN_EXTERNAL_MEETING to "UNABLE_TO_JOIN_EXTERNAL_MEETING",
        MeetingError.MEETING_ERROR_BLOCKED_BY_ACCOUNT_ADMIN to "BLOCKED_BY_ACCOUNT_ADMIN",
        MeetingError.MEETING_ERROR_NEED_SIGN_IN_FOR_PRIVATE_MEETING to "NEED_SIGN_IN_FOR_PRIVATE_MEETING",
        MeetingError.MEETING_ERROR_INVALID_ARGUMENTS to "INVALID_ARGUMENTS",
        MeetingError.MEETING_ERROR_UNKNOWN to "UNKNOWN",
        MeetingError.MEETING_ERROR_INVALID_STATUS to "INVALID_STATUS",
        MeetingError.MEETING_ERROR_JMAK_USER_EMAIL_NOT_MATCH to "JMAK_USER_EMAIL_NOT_MATCH",
        MeetingError.MEETING_ERROR_APP_PRIVILEGE_TOKEN_ERROR to "APP_PRIVILEGE_TOKEN_ERROR",
    )

    fun getErrorName(code: Int): String {
        return errorNames[code] ?: "UNDEFINED"
    }
}